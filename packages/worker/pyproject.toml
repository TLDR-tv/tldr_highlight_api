[project]
name = "worker"
version = "0.1.0"
description = "Celery worker for stream processing and highlight detection"
requires-python = ">=3.13"
dependencies = [
    "shared",
    "celery[redis]>=5.4.0",
    "ffmpeg-python>=0.2.0",
    "google-genai>=0.8.0",
    "pillow>=10.0.0",
    "aiofiles>=23.0.0",
    "numpy>=1.26.0",
    "opencv-python>=4.10.0",
    "faster-whisper>=1.1.1",
    "rapidfuzz>=3.13.0",
    "python-levenshtein>=0.27.1",
    "google-generativeai>=0.8.5",
]

[tool.uv.sources]
shared = { workspace = true }

[project.optional-dependencies]
test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-celery>=1.1.3",
    "factory-boy>=3.3.0",
    "faker>=33.0.0",
    "coverage[toml]>=7.6.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--cov=worker",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]

[tool.coverage.run]
source = ["src/worker"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/app.py",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 90
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
